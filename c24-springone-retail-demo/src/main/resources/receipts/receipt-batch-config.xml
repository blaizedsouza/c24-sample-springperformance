<!--
 | Copyright 2012 C24 Technologies.
 | 
 | Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 | to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 | and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 |
 | The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 |
 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL C24 TECHNOLOGIES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 | WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 | SOFTWARE.
-->

<!-- ======================================================= -->
<!-- Sample configuration to monitor Spring Batch throughput -->
<!-- Uses C24's Integration Objects to parse large files and -->
<!-- normalise the parsed messages                           -->
<!-- @author Andrew Elmore                                   -->
<!-- ======================================================= -->
    

<beans:beans xmlns="http://www.springframework.org/schema/batch" 
     xmlns:beans="http://www.springframework.org/schema/beans" 
     xmlns:c24="http://schema.c24.biz/spring-core"
     xmlns:bat-c24="http://schema.c24.biz/spring-batch"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:task="http://www.springframework.org/schema/task"
     xsi:schemaLocation="
     	http://schema.c24.biz/spring-core			http://schema.c24.biz/spring-core.xsd
     	http://schema.c24.biz/spring-batch			http://schema.c24.biz/spring-batch.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">


	<!-- Create a thread pool to use when parallel processing the file -->
	<task:executor id="receiptFileLoadingPool" pool-size="4" rejection-policy="CALLER_RUNS"/>
	
	<!-- The type of message we expect to parse from the file -->
	<!-- Auto-generated by Integration Objects -->
	<c24:model id="receiptModel" base-element="biz.c24.retaildemo.model.xml.ReceiptElement"/>

	<!-- Declare an ItemReader -->
	<!-- Rapidly split the file around lines starting with <receipt - allows us to use multiple threads to parse the file -->
	<!-- We're reading from a UTF-8 encoded file -->
	<bat-c24:item-reader id="ioItemReader" model-ref="receiptModel" elementStartPattern="&lt;receipt.*">
        <bat-c24:file-source encoding="UTF-8" />
    </bat-c24:item-reader>
    
	<!-- Use an ItemProcessor to transform source model format to our internal format -->
	<!-- Instantiate the auto-generated transform -->
	<beans:bean id="receiptXmlToReceiptTransform" class="biz.c24.retaildemo.transform.ReceiptXmlToJavaTransform"/>
	<bat-c24:transform-item-processor id="ioItemProcessor" transform-ref="receiptXmlToReceiptTransform" target-class="biz.c24.retaildemo.model.Receipt"/>
	
	<!-- Create a throughput monitoring ItemWriter -->
	<!-- Dump out current throughput every 10000 items -->
	<beans:bean id="monitoringItemWriter" class="biz.c24.retaildemo.sb.ThroughputMonitoringItemWriter">
        <beans:constructor-arg value="10000"/>
	</beans:bean>	

	<!-- The Job. Wire together our reader, processor and writer -->
    <job id="fileLoader">
		<step id="parseFile">
    		<tasklet task-executor="receiptFileLoadingPool" throttle-limit="4">
    			<chunk reader="ioItemReader" processor="ioItemProcessor" writer="monitoringItemWriter" commit-interval="1000" processor-transactional="false"/>
    		</tasklet>
    	</step>
    </job>

	
	<!-- ======================== -->
    <!-- Spring Batch boilerplate -->
    <!-- ======================== -->    
	
	<!-- We're not transactional so declare a no-op transaction manager -->
	<beans:bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

	<!-- As this is just a demo, declare an in-memory job repository -->
	<beans:bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"/>

	<!-- Create a job launcher which kicks off tasks synchronously -->
 	<beans:bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
    	<beans:property name="jobRepository" ref="jobRepository" />
	</beans:bean>
	
</beans:beans>